version: 2

models:
  - name: gmx_v2_arbitrum_order_created
    meta:
      blockchain: arbitrum
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'gmx', 'event', 'order_created']
    description: |
      Extracts and decodes the `OrderCreated` event log data from the Arbitrum blockchain. 
      This model processes log entries related to created orders, extracting key variables such as 
      account addresses, event keys, and strings representing the reason for cancellation.

    columns:
      - &blockchain  
        name: blockchain
        description: The blockchain network where the event occurred (Arbitrum)
        tests:
          - not_null
      - &block_time
        name: block_time
        description: The timestamp of the block when the event was recorded
        tests:
          - not_null
      - &block_number
        name: block_number
        description: The block number where the event is included
        tests:
          - not_null
      - &tx_hash
        name: tx_hash
        description: The hash of the transaction where the event was logged
        tests:
          - not_null
      - &index
        name: index
        description: The position of the event within the transaction
        tests:
          - not_null 
      - &contract_address
        name: contract_address
        description: The contract address associated with the event
        tests:
          - not_null          
      - name: event_name
        description: The type of event recorded, always 'OrderCreated' for this model.
        tests:
          - not_null
      - &msg_sender
        name: msg_sender
        description: The address of the sender of the message or transaction.
        tests:
          - not_null
      - &topic1
        name: topic1
        description: The value corresponding to the second indexed event parameter.
        tests:
          - not_null
      - &topic2
        name: topic2
        description: The value corresponding to the third indexed event parameter.
        tests:
          - not_null
      - name: account
        description: An additional address associated with the order.
        tests:
          - not_null
      - name: receiver
        description: The address designated as the receiver in the order.
        tests:
          - not_null
      - name: callback_contract
        description: The contract address for callback functions.
        tests:
          - not_null        
      - name: ui_fee_receiver
        description: The address designated to receive UI fees.
        tests:
          - not_null        
      - name: market
        description: The market in which the order was created.
        tests:
          - not_null        
      - name: initial_collateral_token
        description: The token used as initial collateral in the order.
        tests:
          - not_null        
      - name: swap_path
        description: JSON array of markets through which the swap was routed.
        tests:
          - not_null  
      - &order_type    
        name: order_type
        description: |
          The type of order executed. The following table describes each order type:
          - MarketSwap: Swap token A to token B at the current market price. The order will be cancelled if the minOutputAmount cannot be fulfilled.
          - LimitSwap: Swap token A to token B if the minOutputAmount can be fulfilled.
          - MarketIncrease: Increase position at the current market price. The order will be cancelled if the position cannot be increased at the acceptablePrice.
          - LimitIncrease: Increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled.
          - MarketDecrease: Decrease position at the current market price. The order will be cancelled if the position cannot be decreased at the acceptablePrice.
          - LimitDecrease: Decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled.
          - StopLossDecrease: Decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled.
          - Liquidation: Allows liquidation of positions if the criteria for liquidation are met.
        tests:
          - not_null
          - accepted_values:
              values: ['MarketSwap','LimitSwap','MarketIncrease','LimitIncrease','MarketDecrease','LimitDecrease','StopLossDecrease','Liquidation']
      - name: decrease_position_swap_type
        description: |
          The type of swap for decreasing position, with possible values:
          - 'NoSwap'
          - 'SwapPnlTokenToCollateralToken'
          - 'SwapCollateralTokenToPnlToken'
      - &size_delta_usd
        name: size_delta_usd
        description: The change in position size in USD
        tests:
          - not_null
      - name: initial_collateral_delta_amount
        description: The change in initial collateral amount.
        tests:
          - not_null
      - name: trigger_price
        description: The price that triggers the order execution.
        tests:
          - not_null        
      - name: acceptable_price
        description: The minimum acceptable price for order execution.
        tests:
          - not_null        
      - name: execution_fee
        description: The fee paid for executing the order in native tokens
        tests:
          - not_null        
      - name: callback_gas_limit
        description: The gas limit set for callback functions.
        tests:
          - not_null        
      - name: min_output_amount
        description: The minimum amount of output tokens expected from the order, based on the markets in the swap path.
        tests:
          - not_null        
      - name: updated_at_block
        description: The block number at which the order was last updated.
        tests:
          - not_null        
      - name: updated_at_time
        description: The timestamp when the order was last updated.
      - &is_long
        name: is_long
        description: A boolean indicating whether the position is long
        tests:
          - not_null
      - name: should_unwrap_native_token
        description: Boolean indicating if the native token should be unwrapped.
      - name: is_frozen
        description: Boolean indicating if the order is frozen.
      - name: key
        description: The unique identifier for the order, stored as a bytes32 value.
        tests:
          - not_null
          - unique


  - name: gmx_v2_arbitrum_order_executed
    meta:
      blockchain: arbitrum
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'gmx', 'event', 'order_executed']
    description: |      
      Extracts and decodes the `OrderExecuted` event log data from the Arbitrum blockchain. 
      This model processes log entries related to executed orders, extracting key variables such as 
      account addresses, event keys, and integer values.
    
    columns:
      - *blockchain
      - *block_time
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'OrderExecuted' for this model
        tests:
          - not_null 
      - *msg_sender
      - *topic1
      - *topic2
      - name: key
        description: The key associated with the executed order. Extracted as a bytes32 value.
        tests:
          - not_null
          - unique 
      - name: account
        description: The address associated with the order
        tests:
          - not_null   
      - name: secondary_order_type
        description: |
          The type of secondary order associated with the executed order. 
          This column indicates the nature of any additional order handling or adjustments made. 
          
          The `secondary_order_type` is represented as an unsigned integer with the following possible values:
          - `0`: **None** - No secondary order type is applied.
          - `1`: **Adl (Auto-Deleveraging)** - Indicates that the order is associated with the Auto-Deleveraging mechanism. ADL is used to manage risk by automatically reducing or closing positions that are at risk of liquidation due to insufficient margin or other factors. This mechanism helps in maintaining the stability of the trading platform.
        tests:
          - not_null


  - name: gmx_v2_arbitrum_order_cancelled
    meta:
      blockchain: arbitrum
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'gmx', 'event', 'order_cancelled']
    description: |
      Extracts and decodes the `OrderCancelled` event log data from the Arbitrum blockchain. 
      This model processes log entries related to cancelled orders, extracting key variables such as 
      account addresses, event keys, and strings representing the reason for cancellation.

    columns:
      - *blockchain
      - *block_time
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'OrderCancelled' for this model
        tests:
          - not_null 
      - *msg_sender
      - *topic1
      - *topic2          
      - name: key
        description: The key associated with the cancelled order. Extracted as a bytes32 value
        tests:
          - not_null
          - unique
      - name: account
        description: The address associated with the order
        tests:
          - not_null   
      - name: reason_bytes
        description: The reason for the cancellation in byte format.
        tests:
          - not_null
      - name: reason
        description: The reason for the cancellation in string format.
        tests:
          - not_null

